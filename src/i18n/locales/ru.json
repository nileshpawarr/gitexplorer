{
  "Command": "Команда",
  "Explorer": "Проводник",
  "Usage": "Использование",
  "command copied": "команда скопирована",
  "Note": "Примечание",
  "Normal type speed": "Обычная скорость печати",
  "Fast type speed": "Высокая скорость печати",
  "Light Mode": "Светлый режим",
  "Dark Mode": "Тёмный режим",
  "content": {
    "subtitle": "Найдите нужные команды без поиска в интернете."
  },
  "options": {
    "title": "Я хочу:",
    "primary": {
      "add": "добавить",
      "commit": "зафиксировать (commit)",
      "revert": "отменить/сбросить",
      "initialize": "инициализировать",
      "modify": "изменить",
      "show": "показать/посмотреть",
      "delete": "удалить",
      "compareCommits": "сравнить два коммита",
      "configure": "настроить",
      "clone": "клонировать",
      "ignore": "игнорировать",
      "rename": "переименовать",
      "merge": "объединить",
      "squash": "объединить коммиты (squash)",
      "stash": "сохранить временно (stash)",
      "debug": "отладить",
      "recover": "восстановить",
      "synchronize": "синхронизировать",
      "rebase": "перебазировать (rebase)",
      "cherrypick": "выбрать (cherry-pick)"
    },
    "secondary": {
      "commit": {
        "local-changes": {
          "label": "зафиксировать все локальные изменения в отслеживаемых файлах (commit)"
        },
        "staged-changes": {
          "label": "зафиксировать все изменения в индексе (staged)",
          "nb": "Замените <message> на ваше сообщение коммита."
        }
      },
      "configure": {
        "email-name": {
          "label": "имя и адрес электронной почты",
          "nb": "Ваше имя пользователя и адрес электронной почты должны совпадать с теми, что используются у вашего Git-хостинга (например, GitHub, Bitbucket, GitLab)."
        },
        "editor": {
          "label": "редактор по умолчанию",
          "nb": "Измените редактор по умолчанию на vim."
        },
        "diff-tool": {
          "label": "внешний инструмент сравнения",
          "nb": "Установите внешний инструмент сравнения на meld."
        },
        "merge-tool": {
          "label": "инструмент слияния по умолчанию",
          "nb": "Установите инструмент слияния по умолчанию на meld."
        },
        "color": {
          "label": "цвет",
          "nb": "Включает полезную цветовую маркировку вывода командной строки."
        },
        "signingkey": {
          "label": "добавить GPG-ключ",
          "nb": "Git криптографически безопасен, но не безошибочен. Если вы берете работу других из интернета и хотите убедиться, что коммиты действительно поступают из доверенного источника, Git предоставляет несколько способов подписать и проверить работу с помощью GPG."
        }
      },
      "revert": {
        "specific-commit": {
          "label": "определенный коммит",
          "nb": "Используйте git log, чтобы увидеть хэш каждого коммита."
        },
        "specific-file": {
          "label": "определенный файл"
        },
        "to-last-commit": {
          "label": "к последнему коммиту"
        },
        "to-last-commit-from-remote": {
          "label": "к последнему коммиту в удаленной ветке"
        }
      },
      "initialize": {
        "new-repo": {
          "label": "новый репозиторий",
          "nb": "Убедитесь, что вы находитесь в правильной директории."
        }
      },
      "modify": {
        "commit-message": {
          "label": "мое последнее сообщение коммита"
        },
        "commit": {
          "label": "мой последний коммит, но оставить сообщение коммита без изменений"
        },
        "remoteUrl": {
          "label": "удаленный URL репозитория",
          "nb": "<alias> — это имя вашего удаленного репозитория, например, origin."
        }
      },
      "show": {
        "repo-status": {
          "label": "статус проекта, включая проиндексированные, не проиндексированные и неотслеживаемые файлы"
        },
        "logs": {
          "label": "журнал/история коммитов"
        },
        "uncommittedChanges": {
          "label": "незафиксированные изменения"
        },
        "committedChanges": {
          "label": "зафиксированные/проиндексированные изменения"
        },
        "remoteUrl": {
          "label": "удаленный URL репозитория"
        },
        "stash": {
          "label": "stash"
        },
        "branch": {
          "label": "ветки",
          "nb": "Активная ветка помечена символом *."
        },
        "tags": {
          "label": "теги"
        }
      },
      "delete": {
        "branch": {
          "label": "ветку"
        },
        "delete-multiple-branches": {
          "label": "несколько веток"
        },
        "tag": {
          "label": "тег"
        },
        "remote": {
          "label": "удаленный репозиторий"
        },
        "untracked-files": {
          "label": "неотслеживаемые файлы",
          "nb": "Замените -<flag> на:\n -i для интерактивной команды\n -n для предварительного просмотра того, что будет удалено\n -f для принудительного удаления\n -d для удаления директорий\n -X для удаления игнорируемых файлов\n -x для удаления игнорируемых и неигнорируемых файлов."
        },
        "files-from-index": {
          "label": "файлы из индекса",
          "nb": "Используйте эту опцию, чтобы убрать из индекса и удалить только пути. Файлы в рабочем дереве, измененные или нет, останутся нетронутыми."
        },
        "local-branches-not-on-remote": {
          "label": "локальные ветки, которых нет в удаленном репозитории",
          "nb": "Используйте опцию --dry-run, чтобы сообщить, какие ветки будут удалены, не удаляя их фактически."
        },
        "files-from-old-commit": {
          "label": "файлы из старых коммитов",
          "nb": "Как и опция rebase, описанная ранее, filter-branch — это операция перезаписи. Если вы опубликовали историю, вам нужно будет принудительно отправить (--force) новые ссылки."
        }
      },
      "compareCommits": {
        "terminal": {
          "label": "и вывести результат в терминал",
          "nb": "sha1 и sha2 — это хэши коммитов, которые вы хотите сравнить."
        },
        "file": {
          "label": "и сохранить результат в файл",
          "nb": "sha1 и sha2 — это хэши коммитов, которые вы хотите сравнить. \n\ndiff.txt — это файл, в который вы хотите сохранить содержимое различий."
        }
      },
      "clone": {
        "clone-repo-into-a-new-dir": {
          "label": "существующий репозиторий в новую директорию",
          "nb": "Репозиторий будет клонирован в указанную директорию.\n\nЗамените 'directory' на желаемую директорию."
        },
        "clone-repo-into-a-current-dir": {
          "label": "существующий репозиторий в текущую директорию",
          "nb": "Репозиторий будет клонирован в текущую директорию.\n\nТекущая директория обозначается символом '.' (точка)."
        },
        "clone-repo-with-submodule-into-a-current-dir": {
          "label": "существующий репозиторий с его подмодулями в текущую директорию",
          "nb": "Если версия Git ниже 2.13, используйте опцию --recursive."
        },
        "clone-submodule-after": {
          "label": "клонировать подмодули после клонирования существующего репозитория"
        }
      },
      "ignore": {
        "ignore-files-in-a-dir": {
          "label": "игнорировать все файлы в директории",
          "nb": "Это должно быть добавлено в файл .gitignore.\n\nЗамените 'dir name' на имя директории, файлы которой вы хотите игнорировать."
        },
        "ignore-all-files-of-a-specific-type": {
          "label": "игнорировать все файлы определенного типа",
          "nb": "Это должно быть добавлено в файл .gitignore.\n\nЗамените 'filename extension' на расширение файлов, которые вы хотите игнорировать.\n\nНапример, *.py указывает Git игнорировать все Python-файлы в репозитории."
        }
      },
      "help": {
        "command-help": {
          "label": "справка по команде",
          "nb": "Пример: git merge --help\n\nНажмите q, чтобы выйти из терминала."
        }
      },
      "add": {
        "new-changes": {
          "label": "новые изменения",
          "nb": "Чтобы добавить все файлы в текущей директории, используйте 'git add .'.\n\nЧтобы добавить директорию, используйте 'git add <directory>'."
        },
        "add-new-branch": {
          "label": "новая ветка"
        },
        "add-repo": {
          "label": "новый удаленный репозиторий"
        },
        "add-alias": {
          "label": "псевдоним",
          "nb": "Пример: git config --global alias.st status. Теперь, вводя git st в терминале, вы получите тот же результат, что и при выполнении git status."
        },
        "add-annotated-tag": {
          "label": "аннотированный тег"
        },
        "add-annotated-tag-for-old-commit": {
          "label": "аннотированный тег для старого коммита"
        }
      },
      "push": {
        "new-remote-branch": {
          "label": "несуществующую удаленную ветку"
        }
      },
      "rename": {
        "branch": {
          "label": "ветку"
        },
        "file": {
          "label": "файл"
        },
        "remoteUrl": {
          "label": "удаленный репозиторий"
        }
      },
      "merge": {
        "branch": {
          "label": "слить другую ветку в текущую ветку"
        },
        "single-file": {
          "label": "слить один файл из одной ветки в другую."
        }
      },
      "squash": {
        "pr": {
          "label": "объединить коммиты в pull request в один коммит",
          "nb": "Убедитесь, что последние коммиты были получены из upstream.\n\nПример (предположим, у вас есть удаленный репозиторий с именем upstream):\n\ngit fetch upstream\ngit rebase -i upstream/master\n\nИзмените 'pick' на 'squash' для коммитов, которые вы хотите объединить, и сохраните.\n\ngit push origin <ветка темы> --force-with-lease"
        },
        "commits": {
          "label": "объединить последние n коммитов в один",
          "nb": "Замените N на количество коммитов, которые вы хотите объединить, и <message> на ваше сообщение коммита. Вы можете использовать команду 'git log', чтобы просмотреть историю коммитов."
        }
      },
      "debug": {
        "bisect": {
          "label": "бинарный поиск",
          "nb": "Как только вы укажете хотя бы один плохой и один хороший коммит, git bisect выберет коммит в середине этого диапазона истории, выполнит его проверку и выведет что-то вроде:\nBisecting: 675 revisions left to test after this (roughly 10 steps)\nТеперь вам нужно скомпилировать проверенную версию и протестировать ее. Если эта версия работает правильно, введите:\n\ngit bisect good\n\nЕсли эта версия неисправна, введите:\n\ngit bisect bad\n\nЗатем git bisect ответит чем-то вроде:\n\nBisecting: 337 revisions left to test after this (roughly 9 steps)\n\nПродолжайте повторять процесс: компилируйте дерево, тестируйте его и, в зависимости от результата, выполняйте git bisect good или git bisect bad, чтобы запросить следующий коммит для тестирования.\nВ конце концов, не останется больше ревизий для проверки, и команда выведет описание первого плохого коммита. Ссылка refs/bisect/bad будет указывать на этот коммит.\nПосле сессии bisect, чтобы очистить состояние bisect и вернуться к исходному HEAD, выполните следующую команду:\n\ngit bisect reset"
        },
        "blame": {
          "label": "кто изменил каждую строку",
          "nb": "Опция -L ограничит вывод запрошенным диапазоном строк."
        },
        "grep": {
          "label": "поиск в файлах",
          "nb": "Выводит строки, соответствующие шаблону.\nОпция -n для отображения номеров строк совпадений."
        }
      },
      "recover": {
        "dropped-commit": {
          "label": "показать хэши зависших коммитов после жесткого сброса к предыдущему коммиту",
          "nb": "альтернатива: git log -g. Для восстановления используйте:\ngit checkout -b <recovery> <hash>"
        },
        "deleted-branch": {
          "label": "показать хэши удаленных веток или других объектов Git",
          "nb": "показать хэши всех зависших объектов Git. Для восстановления используйте:\ngit checkout -b <recovery> <hash>"
        }
      },
      "rebase": {
        "origin-branch": {
          "label": "перебазировать ветку origin в мою рабочую ветку",
          "nb": "Перебазируйте ветку origin в рабочую ветку. Замените <branch name> на ветку, которую вы сливаете."
        },
        "local-branch": {
          "label": "перебазировать локальную ветку в мою рабочую ветку",
          "nb": "Перебазируйте другую локальную ветку в рабочую ветку. Замените <branch name> на ветку, которую вы сливаете."
        },
        "skip": {
          "label": "и пропустить коммит",
          "nb": "Во время перебазирования Git может не иметь возможности автоматически применять коммиты из-за конфликтов. Вы можете использовать эту команду, чтобы отбросить свои изменения в текущем коммите и применить изменения из входящей ветки."
        },
        "continue": {
          "label": "и продолжить после разрешения конфликтов",
          "nb": "Во время перебазирования Git может не иметь возможности автоматически применять коммиты из-за конфликтов. Вы можете разрешить эти конфликты вручную и использовать эту команду, чтобы продолжить операцию перебазирования."
        }
      },
      "synchronize": {
        "branch-from-fork": {
          "label": "ветку в форке",
          "nb": "Сначала вам нужно добавить удаленный репозиторий для вашего форка."
        }
      },
      "stash": {
        "save-stash": {
          "label": "(не)отслеживаемые файлы",
          "nb": "Чтобы сохранить stash с пользовательским сообщением, используйте git stash save <message>.\n\nЧтобы сохранить неотслеживаемые файлы, используйте git stash save -u."
        },
        "list-stash": {
          "label": "просмотреть список stash"
        },
        "apply-stash": {
          "label": "применить"
        },
        "show": {
          "label": "просмотреть содержимое stash",
          "nb": "Вы можете опустить идентификатор stash, если хотите просмотреть содержимое последнего stash."
        },
        "delete-stash": {
          "label": "удалить"
        },
        "create-branch": {
          "label": "создать новую ветку и применить stash"
        }
      },
      "cherrypick": {
        "origin-branch": {
          "label": "применить коммит из ветки origin в мою рабочую ветку",
          "nb": "Применить один или несколько коммитов из ветки в вашу рабочую ветку."
        }
      }
    },
    "tertiary": {
      "logs": {
        "all": {
          "label": "все",
          "nb": "Нажмите q в терминале, чтобы выйти из журналов"
        },
        "last-n-commit": {
          "label": "для последних xxx коммитов",
          "nb": "Замените n на количество коммитов, например: git log -2"
        },
        "particular-period": {
          "label": "с определенного периода",
          "nb": "Замените период на желаемый временной интервал, например: git log --since=3days. Вы можете использовать даты, такие как 2018-12-31.\n\nПохожие опции: --until, --before, --after"
        },
        "commit-on-oneline": {
          "label": "с каждым коммитом на одной строке"
        },
        "patches-introduced": {
          "label": "с патчами, внесенными в каждый коммит"
        }
      },
      "branch": {
        "in": {
          "label": "во время работы в ветке"
        },
        "outside": {
          "label": "извне ветки"
        }
      },
      "add-new-branch": {
        "no-checkout": {
          "label": "но оставаться в текущей ветке, в которой я работаю"
        },
        "checkout": {
          "label": "и переключиться на новую ветку"
        },
        "checkout-remote": {
          "label": "из другой ветки"
        }
      },
      "apply-stash": {
        "latest": {
          "label": "последний stash"
        },
        "specific": {
          "label": "конкретный stash",
          "nb": "ID stash можно получить, выполнив git stash list. Обычно он имеет такой формат: stash@{index}, например: stash@{0}"
        },
        "pop": {
          "label": "и удалить stash",
          "nb": "ID stash необязателен. Добавьте его, если хотите применить и удалить конкретный stash; в противном случае оставьте пустым, чтобы удалить последний stash"
        }
      },
      "delete-stash": {
        "all": {
          "label": "все сохраненные изменения"
        },
        "specific": {
          "label": "конкретный stash"
        }
      },
      "delete-multiple-branches": {
        "name": {
          "label": "по имени"
        },
        "pattern": {
          "label": "по шаблону",
          "nb": "Например: git branch | grep \"-\" | xargs git branch -D удалит все ветки, содержащие '-' в их именах, или git branch | grep -v \"master\\|staging\" | xargs git branch -D удалит все ветки, кроме staging и master.\n\nПримечание: Всегда заключайте шаблон регулярного выражения (regex) в кавычки"
        }
      }
    }
  }
}
